import { Inject, Injectable, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser, isPlatformServer } from '@angular/common';
import { makeStateKey, TransferState } from '@angular/platform-browser';

export type EnvironmentName = 'SPADE_ENV';

declare const process: {
  env: { [key in EnvironmentName]: string };
};

@Injectable({
  providedIn: 'root'
})
export class RuntimeService {
  constructor(
    @Inject(PLATFORM_ID) private platformId: Object,
    private transferState: TransferState
  ) {}

  isRunInBrowser(): boolean {
    return isPlatformBrowser(this.platformId);
  }

  isRunInServer(): boolean {
    return isPlatformServer(this.platformId);
  }

  runInServerOnly(executor: () => void) {
    if (this.isRunInBrowser()) {
      return;
    }

    executor();
  }

  runInBrowserOnly(executor: () => void) {
    if (this.isRunInServer()) {
      return;
    }

    executor();
  }

  /**
   * Retrieve any transfer state generated by a factory
   *
   * @param name state key name
   * @param defaultValue default value if not existed or falsy value
   * @param factoryInServer a value factory running in server side only
   */
  getTransferState<T>(
    name: string,
    defaultValue: T,
    factoryInServer: () => T
  ): T {
    const STATE_KEY = makeStateKey(name);
    const state = this.transferState.get(STATE_KEY, null);

    if (state) {
      return state;
    } else {
      const value = this.isRunInServer()
        ? factoryInServer() || defaultValue
        : defaultValue;
      this.transferState.set(STATE_KEY, value);
      return value;
    }
  }

  /**
   * Retrieve a transferable environment variable
   *
   * @param name environment variable name
   * @param defaultValue default value if not found
   */
  getEnvironmentVariable(name: EnvironmentName, defaultValue: string): string {
    return this.getTransferState<string>(
      name,
      defaultValue,
      () => process.env[name]
    );
  }
}
