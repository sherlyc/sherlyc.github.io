import { Component } from "@angular/core";
import { ComponentFixture, TestBed } from "@angular/core/testing";
import { By } from "@angular/platform-browser";
import { cloneDeep } from "lodash-es";
import { GlobalStyleService } from "../../../services/global-style/global-style.service";
import { mockService, ServiceMock } from "../../../services/mocks/MockService";
import { GlobalStyleDirective } from "./global-style.directive";

@Component({
  selector: "app-fake-component",
  template: '<div class="something" [appGlobalStyle]="inputStyle"></div>'
})
class FakeComponent {
  inputStyle!: object;
}

describe("Global Style Directive", () => {
  let fixture: ComponentFixture<FakeComponent>;
  let component: FakeComponent;
  let globalStyleService: ServiceMock<GlobalStyleService>;

  beforeEach(async () => {
    jest.resetAllMocks();
    await TestBed.configureTestingModule({
      declarations: [FakeComponent, GlobalStyleDirective],
      providers: [
        {
          provide: GlobalStyleService,
          useClass: mockService(GlobalStyleService)
        }
      ]
    }).compileComponents();

    globalStyleService = TestBed.inject(GlobalStyleService) as ServiceMock<
      GlobalStyleService
    >;
    fixture = TestBed.createComponent(FakeComponent);
    component = fixture.componentInstance;
  });

  it("should inject classes generated by Global Style Service", () => {
    const before = fixture.debugElement.query(By.css(".something"))
      .nativeElement.className;
    expect(before).toBe("something");

    const mockStyle = { display: "grid" };
    component.inputStyle = mockStyle;
    globalStyleService.injectStyle.mockReturnValue("spade_01 spade_02");

    fixture.detectChanges();

    const after = fixture.debugElement.query(By.css(".something")).nativeElement
      .className;
    expect(after).toBe("something spade_01 spade_02");
  });

  it("should remove existing injected classes", () => {
    component.inputStyle = { display: "grid" };
    globalStyleService.stylePrefix.mockReturnValue("spade");
    globalStyleService.injectStyle.mockReturnValue("spade_01 spade_02");
    fixture.detectChanges();

    const before = fixture.debugElement.query(By.css(".something"))
      .nativeElement.className;
    expect(before).toBe("something spade_01 spade_02");

    component.inputStyle = { color: "red" };
    globalStyleService.injectStyle.mockReturnValue("spade_03 spade_04");
    fixture.detectChanges();

    const after = fixture.debugElement.query(By.css(".something")).nativeElement
      .className;
    expect(after).toBe("something spade_03 spade_04");
  });

  it("should not call injectStyle if the input is not changed", () => {
    const fakeStyle = { display: "grid" };
    globalStyleService.stylePrefix.mockReturnValue("spade");
    globalStyleService.injectStyle.mockReturnValue("spade_01 spade_02");

    component.inputStyle = cloneDeep(fakeStyle);
    fixture.detectChanges();

    expect(globalStyleService.injectStyle).toHaveBeenCalled();
    globalStyleService.injectStyle.mockReset();

    component.inputStyle = cloneDeep(fakeStyle);
    fixture.detectChanges();

    expect(globalStyleService.injectStyle).not.toHaveBeenCalled();
  });
});
