/*------------------------------------*\
    MIXINS
\*------------------------------------*/

/**
 * Create a fully formed type style (sizing and vertical rhythm) by passing in a
 * single value, e.g.:
 *
   `@include font-size(10px);`
 *
 * Thanks to @redclov3r for the `line-height` Sass:
 * twitter.com/redclov3r/status/250301539321798657
 */
@mixin font-size($font-size, $line-height: true) {
  font-size: $font-size;
  font-size: $font-size / $base-font-size * 1rem;

  @if $line-height {
    // line-height:ceil($font-size / $base-line-height) * ($base-line-height / $font-size);
    line-height: $line-height;
  }
}

/**
 * Font size mixin
 */

@mixin font-size-adapt(
  $small: false,
  $medium: false,
  $large: false,
  $xlarge: false,
  $line-height: false
) {
  @if $small {
    @include font-size($small, $line-height);
  }

  @if $medium {
    @include media-query(medium-up) {
      @include font-size($medium, $line-height);
    }
  }

  @if $large {
    @include media-query(large-up) {
      @include font-size($large, $line-height);
    }
  }

  @if $xlarge {
    @include media-query(xlarge-up) {
      @include font-size($xlarge, $line-height);
    }
  }
}

/**
 * Media Query Mixin
 */

@mixin media-query($media-query) {
  @if $media-query == small-only {
    @media only screen and (min-width: $small-start) and (max-width: $small-end) {
      @content;
    }
  }

  @if $media-query == medium-only {
    @media only screen and (min-width: $medium-start) and (max-width: $medium-end) {
      @content;
    }
  }

  @if $media-query == large-only {
    @media only screen and (min-width: $large-start) and (max-width: $large-end) {
      @content;
    }
  }

  @if $media-query == xlarge-only {
    @media only screen and (min-width: $xlarge-start) and (max-width: $xlarge-end) {
      @content;
    }
  }

  @if $media-query == xxlarge-only {
    @media only screen and (min-width: $xxlarge-start) and (max-width: $xxlarge-end) {
      @content;
    }
  }

  @if $media-query == small-up {
    @media only screen {
      @content;
    }
  }

  @if $media-query == medium-up {
    @media only screen and (min-width: $medium-start) {
      @content;
    }
  }

  @if $media-query == large-up {
    @media only screen and (min-width: $large-start) {
      @content;
    }
  }

  @if $media-query == xlarge-up {
    @media only screen and (min-width: $xlarge-start) {
      @content;
    }
  }

  @if $media-query == xxlarge-up {
    @media only screen and (min-width: $xxlarge-start) {
      @content;
    }
  }
}

/**
 * Light Links
 */

@mixin links-light {
  a {
    @include link-colors(#fff, #fff, #fff);
  }
}

/**
 * Link Colors: Part of Compass
 */

@mixin link-colors(
  $normal,
  $hover: false,
  $active: false,
  $visited: false,
  $focus: false
) {
  color: $normal;

  @if $visited {
    &:visited {
      color: $visited;
    }
  }

  @if $focus {
    &:focus {
      color: $focus;
    }
  }

  @if $hover {
    &:hover {
      color: $hover;
    }
  }

  @if $active {
    &:active {
      color: $active;
    }
  }
}

/**
 * Rem Units
 * Converts properties to both REM and Pixel Values. Based on line-height
 * @include rem(margin-bottom, 0.5)
 * @include rem(padding, 1, 20px);
 */

@mixin rem($property, $multiplier: 1, $unit: $base-spacing-unit) {
  @if type-of($multiplier) != 'number' {
    $unit: $multiplier;
    $multiplier: 1;
  }
  @include rem-full($multiplier, $property, $unit);
}

/**
 * Helper function for REM
 * @include rem-full(padding, 10px 20px 10px 30px);
 */

@mixin rem-full($multiplier, $property, $px-values) {
  // Convert the baseline into rems
  $baseline-rem: $base-font-size / 1rem * 1;
  // Print the first line in pixel values
  // If there is only one (numeric) value, return the property/value line for it.
  @if type-of($px-values) == 'number' {
    #{$property}: $px-values * $multiplier;
    // The following breaks with node-sass 2.0.1 / libsass 3.1.0
    // but is fixed in libsass 3.2
    // https://github.com/sass/libsass/issues/917
    #{$property}: $px-values / $baseline-rem * $multiplier;
  } @else {
    // Create an empty list that we can dump values into
    $rem-values: ();
    $pixel-values: ();

    @each $value in $px-values {
      // If the value is zero or not a number, return it
      @if $value == 0 or type-of($value) != 'number' {
        $rem-values: append($rem-values, $value);
        $pixel-values: append($pixel-values, $value);
      } @else {
        $rem-values: append($rem-values, $value / $baseline-rem * $multiplier);
        $pixel-values: append($pixel-values, $value * $multiplier);
      }
    }
    // Return the property and its list of converted values
    #{$property}: $pixel-values;
    #{$property}: $rem-values;
  }
}
