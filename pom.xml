<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd" xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>nz.stuff.stable.yokohama</groupId>
    <artifactId>yokohama-parent</artifactId>
    <version>1.1</version>
  </parent>

  <groupId>nz.stuff.stable.experience</groupId>
  <artifactId>experience-frontend</artifactId>
  <version>1.999-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>${project.artifactId}</name>
  <description>Kubernetes configuration to deploy this application</description>

  <properties>
    <microserviceGroup>experience</microserviceGroup>
    <tile-deploy.nodeVersionRange>[10,11)</tile-deploy.nodeVersionRange>
    <tile-deploy.autocannon.timeoutMillis>120000</tile-deploy.autocannon.timeoutMillis>
    <tile-deploy.image.name>${tile-deploy.docker.registry}/${organisation.domain}/${organisation.group}/${project.artifactId}:${project.version}</tile-deploy.image.name>
    <tile-deploy.autocannon.image.name>${tile-deploy.docker.registry}/nz.stuff/yokohama/yokohama-autocannon:1.3</tile-deploy.autocannon.image.name>

  </properties>

  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>1.6.0</version>
        <executions>
          <execution>
            <id>npm-install</id>
            <goals>
              <goal>exec</goal>
            </goals>
            <phase>generate-resources</phase>
            <configuration>
              <workingDirectory>${basedir}</workingDirectory>
              <executable>npm</executable>
              <arguments>
                <argument>ci</argument>
              </arguments>
            </configuration>
          </execution>

          <execution>
            <id>npm-run-test</id>
            <goals>
              <goal>exec</goal>
            </goals>
            <phase>compile</phase>
            <configuration>
              <workingDirectory>${basedir}</workingDirectory>
              <executable>npm</executable>
              <arguments>
                <argument>run</argument>
                <argument>test</argument>
              </arguments>
            </configuration>
          </execution>
          <execution>
            <id>npm-run-build</id>
            <goals>
              <goal>exec</goal>
            </goals>
            <phase>compile</phase>
            <configuration>
              <workingDirectory>${basedir}</workingDirectory>
              <executable>npm</executable>
              <arguments>
                <argument>run</argument>
                <argument>build</argument>
              </arguments>
            </configuration>
          </execution>

          <execution>
            <id>npm-run-integration-test</id>
            <goals>
              <goal>exec</goal>
            </goals>
            <phase>integration-test</phase>
            <configuration>
              <workingDirectory>${basedir}</workingDirectory>
              <executable>npm</executable>
              <arguments>
                <argument>run</argument>
                <argument>integration-test</argument>
              </arguments>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <version>3.0.2</version>
        <executions>
          <execution>
            <id>copy-dist</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/docker/resources/srv/${project.artifactId}/dist</outputDirectory>
              <resources>
                <resource>
                  <directory>dist</directory>
                  <filtering>false</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <version>3.1.0</version>
        <executions>
          <execution>
            <id>copy-docker-resources</id>
            <phase>process-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/docker/resources</outputDirectory>
              <resources>
                <resource>
                  <directory>src/main/resources</directory>
                  <filtering>true</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>copy-dockerfile</id>
            <phase>process-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/docker/build</outputDirectory>
              <resources>
                <resource>
                  <directory>src/main/docker</directory>
                  <filtering>true</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>


      <plugin>
        <groupId>net.stickycode.plugins</groupId>
        <artifactId>bounds-maven-plugin</artifactId>
        <version>3.6</version>
        <executions>
          <execution>
            <id>get-environment-versions</id>
            <phase>process-classes</phase>
            <goals>
              <goal>current-version</goal>
            </goals>
            <configuration>
              <coordinates>
                <basalt-nodejs.version>nz.stuff.stable.yokohama:yokohama-nodejs:${tile-deploy.nodeVersionRange}</basalt-nodejs.version>
              </coordinates>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>io.fabric8</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <version>0.27.2</version>
        <executions>
          <execution>
            <id>build-node-image</id>
            <goals>
              <goal>build</goal>
            </goals>
            <phase>package</phase>
            <configuration>
              <showLogs>true</showLogs>
              <images>
                <image>
                  <alias>practiv-tile-container</alias>
                  <name>${tile-deploy.image.name}</name>

                  <build>
                    <dockerFile>${project.build.directory}/docker/build/Dockerfile</dockerFile>
                    <assembly>

                      <basedir>/</basedir>

                      <inline>
                        <fileSets>
                          <fileSet>
                            <fileMode>0755</fileMode>
                            <outputDirectory>.</outputDirectory>
                            <directory>${project.build.directory}/docker/resources</directory>
                          </fileSet>
                        </fileSets>
                      </inline>
                    </assembly>

                  </build>

                </image>
              </images>
            </configuration>
          </execution>

          <execution>
            <id>push-docker-image</id>
            <goals>
              <goal>push</goal>
            </goals>
            <phase>deploy</phase>
            <configuration>
              <showLogs>true</showLogs>
              <images>
                <image>
                  <alias>application</alias>
                  <name>${tile-deploy.image.name}</name>
                  <build />
                </image>
              </images>
            </configuration>
          </execution>

          <execution>
            <id>start-docker-image</id>
            <goals>
              <goal>start</goal>
            </goals>
            <phase>pre-integration-test</phase>
            <configuration>
              <showLogs>true</showLogs>
              <images>
                <image>
                  <alias>practiv-tile-container</alias>
                  <name>${tile-deploy.image.name}</name>
                  <run>
                    <ports>
                      <port>+node-host:tile-deploy.port:4000</port>
                    </ports>
                    <log>
                      <date>NONE</date>
                      <color>blue</color>
                    </log>
                    <network>
                      <alias>application</alias>
                      <name>${project.artifactId}</name>
                      <mode>custom</mode>
                    </network>
                  </run>

                </image>
              </images>

              <autoCreateCustomNetworks>true</autoCreateCustomNetworks>
            </configuration>
          </execution>

          <execution>
            <id>run-autocannon</id>
            <goals>
              <goal>start</goal>
            </goals>
            <phase>integration-test</phase>
            <configuration>
              <images>
                <image>
                  <alias>autocannon</alias>
                  <name>${tile-deploy.autocannon.image.name}</name>
                  <run>
                    <env>
                      <URL_UNDER_TEST>http://application:4000</URL_UNDER_TEST>
                      <MAX_BENCHMARK_SECONDS>90</MAX_BENCHMARK_SECONDS>
                    </env>

                    <log>
                      <date>NONE</date>
                      <color>magenta</color>
                    </log>

                    <wait>
                      <log>Performance test passed, time elapsed</log>
                      <time>${tile-deploy.autocannon.timeoutMillis}</time>
                    </wait>

                    <network>
                      <alias>autocannon</alias>
                      <name>${project.artifactId}</name>
                      <mode>custom</mode>
                    </network>
                  </run>

                </image>
              </images>
              <autoCreateCustomNetworks>true</autoCreateCustomNetworks>
            </configuration>
          </execution>
          <execution>
            <id>stop-docker-image</id>
            <phase>verify</phase>
            <goals>
              <goal>stop</goal>
            </goals>
          </execution>
        </executions>
      </plugin>



      <plugin>
        <groupId>io.repaint.maven</groupId>
        <artifactId>tiles-maven-plugin</artifactId>
        <version>2.11</version>
        <extensions>true</extensions>
        <configuration>
          <tiles>
            <tile>nz.stuff.stable.yokohama:yokohama-tile-distribution:[1,2)</tile>
            <tile>io.practiv.stable.tile:practiv-tile-buildinfo:[2,3)</tile>
            <tile>io.practiv.stable.tile:practiv-tile-release:[2,3)</tile>
            <tile>io.practiv.stable.tile:practiv-tile-kubernetes-application:[2,3)</tile>
          </tiles>
        </configuration>
      </plugin>
    </plugins>
  </build>

</project>
